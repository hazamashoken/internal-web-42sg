	    this.calendar = this._$calendar.fullCalendar({
	      header: {
	        left: '',
	        center: "title",
	        right: 'today prev next'
	      },
	      axisFormat: 'h:mm a',
	      editable: true,
	      defaultDate: moment(),
	      defaultView: 'agendaWeek',
	      firstDay: 1,
	      allDaySlot: false,
	      slotEventOverlap: true,
	      selectable: true,
	      selectHelper: true,
	      slotDuration: '00:30:00',
	      snapDuration: '00:15:00',

	      // Get all events from new date range (ex: prev/next) and remove previous events
	      events: function events(start, end, timezone, callback) {

	        var data = {
	          'start': moment(start).subtract('2', 'hours').format(),
	          'end': moment(end).add('2', 'hours').format()
	        };

	        _jquery2.default.getJSON(mthis._$calendar.data('index-url'), data, function (events) {

	          mthis._$calendar.fullCalendar("removeEvents");
	          _jquery2.default.getJSON(mthis._$calendar.data('unavailable-url'), data, function (unavailableEvents) {
	            events.push.apply(events, unavailableEvents.data);
	            callback(events);
	          });
	        }).fail(function (_) {
	          mthis._showNotification(_noties.getEventsError);
	        });
	      },
	      // Add delete button when a new event is created
	      eventRender: function eventRender(event, element) {
	        if (event.className.indexOf('closed') == -1) element.find(".fc-time").append('<span data-ids=\'' + event.ids + '\' data-id=\'' + event.id + '\' class=\'pull-right delete\'>X</span>');
	        return element;
	      },
	      eventAfterRender: function eventAfterRender(event, element, view) {
	        element.css({ marginRight: 0, left: 0, right: 0 });
	        return element;
	      },
	      // When a event is moved, we check if another event exist a the same time otherwise we update it
	      eventDrop: function eventDrop(event, delta, revertFunc) {
	        mthis._updateEvent(mthis._$calendar.data('update-url').replace(":ids", event.id), event.start, event.end, event.id, revertFunc, event.ids);
	      },
	      // When a event is resized, we check if another event exist a the same time otherwise we update it
	      eventResize: function eventResize(event, delta, revertFunc) {
	        mthis._updateEvent(mthis._$calendar.data('update-url').replace(":ids", event.id), event.start, event.end, event.id, revertFunc, event.ids);
	      },
	      // create a event after selected a period
	      select: function select(start, end) {
	        mthis._createEvent(mthis._$calendar.data('create-url'), start, end);
	        return;
	      }
	    });

	    this._bindEvent();
	  }


renderHelper: function(event, sourceSeg) {
			var helperNodes = [];
			var segs = this.eventToSegs(event);
			var rowStructs;

			segs = this.renderFgSegEls(segs); // assigns each seg's el and returns a subset of segs that were rendered
			rowStructs = this.renderSegRows(segs);

			// inject each new event skeleton into each associated row
			this.rowEls.each(function(row, rowNode) {
				var rowEl = $(rowNode); // the .fc-row
				var skeletonEl = $('<div class="fc-helper-skeleton"><table/></div>'); // will be absolutely positioned
				var skeletonTop;

				// If there is an original segment, match the top position. Otherwise, put it at the row's top level
				if (sourceSeg && sourceSeg.row === row) {
					skeletonTop = sourceSeg.el.position().top;
				}
				else {
					skeletonTop = rowEl.find('.fc-content-skeleton tbody').position().top;
				}

				skeletonEl.css('top', skeletonTop)
					.find('table')
						.append(rowStructs[row].tbodyEl);

				rowEl.append(skeletonEl);
				helperNodes.push(skeletonEl[0]);
			});

			return ( // must return the elements rendered
				this.helperEls = $(helperNodes) // array -> jQuery set
			);
		},

renderFgSegEls: function(segs, disableResizing) {
			var view = this.view;
			var html = '';
			var renderedSegs = [];
			var i;

			if (segs.length) { // don't build an empty html string

				// build a large concatenation of event segment HTML
				for (i = 0; i < segs.length; i++) {
					html += this.fgSegHtml(segs[i], disableResizing);
				}

				// Grab individual elements from the combined HTML string. Use each as the default rendering.
				// Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.
				$(html).each(function(i, node) {
					var seg = segs[i];
					var el = view.resolveEventEl(seg.event, $(node));

					if (el) {
						el.data('fc-seg', seg); // used by handlers
						seg.el = el;
						renderedSegs.push(seg);
					}
				});
			}

			return renderedSegs;
		},



    fgSegHtml: function(seg, disableResizing) {
			var view = this.view;
			var event = seg.event;
			var isDraggable = view.isEventDraggable(event);
			var isResizableFromStart = !disableResizing && seg.isStart && view.isEventResizableFromStart(event);
			var isResizableFromEnd = !disableResizing && seg.isEnd && view.isEventResizableFromEnd(event);
			var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);
			var skinCss = cssToStr(this.getSegSkinCss(seg));
			var timeText;
			var fullTimeText; // more verbose time text. for the print stylesheet
			var startTimeText; // just the start time text

			classes.unshift('fc-time-grid-event', 'fc-v-event');

			if (view.isMultiDayEvent(event)) { // if the event appears to span more than one day...
				// Don't display time text on segments that run entirely through a day.
				// That would appear as midnight-midnight and would look dumb.
				// Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)
				if (seg.isStart || seg.isEnd) {
					timeText = this.getEventTimeText(seg);
					fullTimeText = this.getEventTimeText(seg, 'LT');
					startTimeText = this.getEventTimeText(seg, null, false); // displayEnd=false
				}
			} else {
				// Display the normal time text for the *event's* times
				timeText = this.getEventTimeText(event);
				fullTimeText = this.getEventTimeText(event, 'LT');
				startTimeText = this.getEventTimeText(event, null, false); // displayEnd=false
			}

			return '<a class="' + classes.join(' ') + '"' +
				(event.url ?
					' href="' + htmlEscape(event.url) + '"' :
					''
					) +
				(skinCss ?
					' style="' + skinCss + '"' :
					''
					) +
				'>' +
					'<div class="fc-content">' +
						(timeText ?
							'<div class="fc-time"' +
							' data-start="' + htmlEscape(startTimeText) + '"' +
							' data-full="' + htmlEscape(fullTimeText) + '"' +
							'>' +
								'<span>' + htmlEscape(timeText) + '</span>' +
							'</div>' :
							''
							) +
						(event.title ?
							'<div class="fc-title">' +
								htmlEscape(event.title) +
							'</div>' :
							''
							) +
					'</div>' +
					'<div class="fc-bg"/>' +
					/* TODO: write CSS for this
					(isResizableFromStart ?
						'<div class="fc-resizer fc-start-resizer" />' :
						''
						) +
					*/
					(isResizableFromEnd ?
						'<div class="fc-resizer fc-end-resizer" />' :
						''
						) +
				'</a>';
		},